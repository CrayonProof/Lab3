, #include
", "
"", {
"\n", }
"_1_1", std
"_vector, txt"
#include, <vector>
%, wordsMap2[state]
'\n', {
*argv[], {
*it, state2
+, ch
//, this
//cout, <<
0, i
1, i++
100, i++
<, s
<<, word
<<endl, map<string
<ctime>, using
<fstream>, #include
<iostream>, #include
<list>, #include
<map>, #include
<set>, #include
<vector>, #include
=, 0
==, string
=wordsVector, end
>>, noskipws
M, i++
M=2, map<list<string>
NULL, //
argc, char
argv[1], set<string>
argv[2], string
at, i
auto, p
begin, it
bool, is_of_some
ch, {
char, ch
chari, char
clear, for
close, ofstream
const, string
cout, <<
dont, get
else, {
encompassing_string, const
end, it++
endl, word
every, time
false, }
fileName, =
fin, argv[1]
find_first_not_of, encompassing_string
first, <<
for, int
fstream, fin
generated, //
get, the
i, =
i++, {
if, s
ifstream, inputFile
in, while
ind, =
initializes, the
inputFile, inputFile
insert, word
int, i
is_of_some, string
it, =wordsVector
it++, {
it=wordsVector, begin
iterator, it=wordsVector
length, i++
line, ifstream
list<string>, st
main, int
map<list<string>, vector<string>>
map<string, string>
namespace, std
noskipws, >>
npos, }
number, generated
ofstream, outFileSet
open, argv[1]
out, |
outFileMap, outFileMap
outFileSet, outFileSet
outFileVec, outFileVec
p, wordsMap
pair<string, string>
pop_front, }
push_back, word
rand, %
random, number
return, s
s, {
same, thing
second, <<
set<string>, wordsSet
size, 1
so, you
srand, time
st, for
state, =
state2, =
std, bool
string, encompassing_string
string>, wordsMap
string_contains, string
the, random
thing, every
this, line
time, NULL
true, }
trunc, for
txt", std
using, namespace
vector<string>, wordsVector
vector<string>>, wordsMap2
while, fin
word, string
wordsMap, wordsMap
wordsMap2, string
wordsMap2[state2], push_back
wordsMap2[state], size
wordsMap2[state][ind], <<
wordsMap3, list<string>
wordsMap3[st], push_back
wordsMap3[st][ind], st
wordsMap3[st][ind]<<", "
wordsMap[state], <<
wordsSet, vector<string>
wordsVector, string
you, dont
{, return
|, std
||, ch
}, bool
